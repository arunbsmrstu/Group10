/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x045103
#endif


#include <node.h>


#include <v8.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#endif

#if (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym)
#endif

#if (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

SWIGINTERN void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
SWIGRUNTIME V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  v8::Handle<v8::Value> err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else    
    handle.ClearWeak();
    handle.Reset();
#endif

#if (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#else
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#endif
};

SWIGRUNTIME v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

SWIGRUNTIME int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#else
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

SWIGRUNTIME int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

SWIGRUNTIME void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void *ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#endif

#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

}

SWIGRUNTIME int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();
  
  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

SWIGRUNTIME v8::Handle<v8::Value> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE_ESC();
  
  v8::Handle<v8::FunctionTemplate> class_templ;

  if (ptr == NULL) {
#if (SWIG_V8_VERSION < 0x031903)
    SWIGV8_ESCAPE(SWIGV8_NULL());
#else    
    v8::Local<v8::Primitive> result = SWIGV8_NULL();
    SWIGV8_ESCAPE(result);
#endif    
  }

#if (SWIG_V8_VERSION < 0x031903)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *isolate = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

//  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

SWIGRUNTIME SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGRUNTIME SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  if(objRef->InternalFieldCount() < 1) return false;
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
  return (flag->IsBoolean() && flag->BooleanValue());
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    SWIGV8_HANDLESCOPE();
    
    SwigV8PackedData *sobj;

    v8::Handle<v8::Object> objRef = valRef->ToObject();

#if (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#else
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#else
  object.Clear();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));

#if (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#endif

#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

  SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

#if (SWIG_V8_VERSION < 0x031903)
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
#else
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Local<v8::Value> result, v8::Handle<v8::Value> obj) {
#endif
  SWIGV8_HANDLESCOPE_ESC();
  
  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW();
  }
#if (SWIG_V8_VERSION < 0x031903)
  v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
#else  
  v8::Local<v8::Array> arr = v8::Local<v8::Array>::Cast(result);
#endif  
  arr->Set(arr->Length(), obj);

  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    SWIGV8_HANDLESCOPE_ESC();
    
    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

    v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info)
{
    char buffer[256];
    char msg[512];
    int res;

    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_a_8__unsigned_char swig_types[0]
#define SWIGTYPE_p_char swig_types[1]
#define SWIGTYPE_p_int swig_types[2]
#define SWIGTYPE_p_long_long swig_types[3]
#define SWIGTYPE_p_short swig_types[4]
#define SWIGTYPE_p_signed_char swig_types[5]
#define SWIGTYPE_p_uint8Array swig_types[6]
#define SWIGTYPE_p_unsigned_char swig_types[7]
#define SWIGTYPE_p_unsigned_int swig_types[8]
#define SWIGTYPE_p_unsigned_long_long swig_types[9]
#define SWIGTYPE_p_unsigned_short swig_types[10]
#define SWIGTYPE_p_upm__EBOLED swig_types[11]
#define SWIGTYPE_p_upm__Jhd1313m1 swig_types[12]
#define SWIGTYPE_p_upm__LCD swig_types[13]
#define SWIGTYPE_p_upm__Lcm1602 swig_types[14]
#define SWIGTYPE_p_upm__SAINSMARTKS swig_types[15]
#define SWIGTYPE_p_upm__SSD1306 swig_types[16]
#define SWIGTYPE_p_upm__SSD1308 swig_types[17]
#define SWIGTYPE_p_upm__SSD1327 swig_types[18]
#define SWIGTYPE_p_upm__displayAddressingMode swig_types[19]
static swig_type_info *swig_types[21];
static swig_module_info swig_module = {swig_types, 20, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x030008 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


#include <string>


#include <stdint.h>		// Use the C99 official header


	// Because there's no guarantee that v8 will ever call garbage collection,
	// we're adding a function that will allow a user to call it manually
	void cleanUp()
	{
		// Call the v8 garbage collector as long as there is memory to clean up
		// See https://codereview.chromium.org/412163003 for this API change
#if (SWIG_V8_VERSION < 0x032838)
		while (!v8::V8::IdleNotification())
#else
		while (!v8::Isolate::GetCurrent()->IdleNotification(1000))
#endif
		{;}
	}


typedef uint8_t uint8Array;


SWIGINTERN
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = valRef->IntegerValue();

  return SWIG_OK;
}

SWIGINTERN uint8Array *new_uint8Array(int nelements){
  return new uint8_t[nelements]();
}
SWIGINTERN uint8_t uint8Array_getitem(uint8Array *self,int index){
  return self[index];
}

SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return SWIGV8_NUMBER_NEW(value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW((long)(value));
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = obj->NumberValue();

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long longVal = (long) obj->NumberValue();

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (v8::Handle<v8::Value> obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned char)(v);
    }
  }  
  return res;
}

SWIGINTERN void uint8Array_setitem(uint8Array *self,int index,uint8_t value){
  self[index] = value;
}
SWIGINTERN uint8_t *uint8Array_cast(uint8Array *self){
  return self;
}
SWIGINTERN uint8Array *uint8Array_frompointer(uint8_t *t){
  return (uint8Array *) t;
}

SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return SWIGV8_INT32_NEW(value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
    v8::Handle<v8::String> js_str = valRef->ToString();

    size_t len = js_str->Utf8Length() + 1;
    char* cstr = new char[len];
    js_str->WriteUtf8(cstr, len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      v8::Handle<v8::Object> obj = valRef->ToObject();
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}


SWIGINTERN int
SWIG_AsPtr_std_string (v8::Handle<v8::Value> obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return SWIGV8_UNDEFINED();
    } else {
      v8::Handle<v8::String> js_str = SWIGV8_STRING_NEW2(carray, size);
      return js_str;
    }
  } else {
    return SWIGV8_UNDEFINED();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


    #include "lcd.hpp"


SWIGINTERN
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) obj->IntegerValue();

  return SWIG_OK;
}


SWIGINTERN
int SWIG_AsVal_bool (v8::Handle<v8::Value> obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }

  if (val) *val = obj->BooleanValue();
  return SWIG_OK;
}


    #include "lcm1602.hpp"


    #include "jhd1313m1.hpp"


    #include "ssd1327.hpp"


    #include "ssd1308.hpp"


SWIGINTERN int
SWIG_AsVal_signed_SS_char (v8::Handle<v8::Value> obj, signed char *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SCHAR_MIN || v > SCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (signed char)(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_short (v8::Handle<v8::Value> obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (short)(v);
    }
  }  
  return res;
}


    #include "eboled.hpp"


SWIGINTERN
v8::Handle<v8::Value> SWIG_From_double   (double val)
{
  return SWIGV8_NUMBER_NEW(val);
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


    #include "sainsmartks.hpp"


    #include "ssd1306.hpp"


#define SWIGV8_INIT jsupm_i2clcd_initialize


SWIGV8_ClientData _exports_uint8Array_clientData;
SWIGV8_ClientData _exports_LCD_clientData;
SWIGV8_ClientData _exports_Lcm1602_clientData;
SWIGV8_ClientData _exports_Jhd1313m1_clientData;
SWIGV8_ClientData _exports_SSD1327_clientData;
SWIGV8_ClientData _exports_SSD1308_clientData;
SWIGV8_ClientData _exports_EBOLED_clientData;
SWIGV8_ClientData _exports_SAINSMARTKS_clientData;
SWIGV8_ClientData _exports_SSD1306_clientData;


static SwigV8ReturnValue _wrap_cleanUp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cleanUp.");
  
  {
    try {
      cleanUp();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_uint8Array(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  uint8Array *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_uint8Array.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_uint8Array" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (uint8Array *)new_uint8Array(arg1);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_uint8Array, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGINTERN void delete_uint8Array(uint8Array *self){
  delete [] self;
}

#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_uint8Array(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_uint8Array(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_uint8Array(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_uint8Array(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          uint8Array * arg1 = (uint8Array *)proxy->swigCObject;
          delete_uint8Array(arg1);
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_uint8Array_getitem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8Array *arg1 = (uint8Array *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  uint8_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_uint8Array_getitem.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_uint8Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint8Array_getitem" "', argument " "1"" of type '" "uint8Array *""'"); 
  }
  arg1 = (uint8Array *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint8Array_getitem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (uint8_t)uint8Array_getitem(arg1,arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_uint8Array_setitem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8Array *arg1 = (uint8Array *) 0 ;
  int arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_uint8Array_setitem.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_uint8Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint8Array_setitem" "', argument " "1"" of type '" "uint8Array *""'"); 
  }
  arg1 = (uint8Array *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint8Array_setitem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uint8Array_setitem" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  {
    try {
      uint8Array_setitem(arg1,arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_uint8Array_cast(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8Array *arg1 = (uint8Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_uint8Array_cast.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_uint8Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint8Array_cast" "', argument " "1"" of type '" "uint8Array *""'"); 
  }
  arg1 = (uint8Array *)(argp1);
  {
    try {
      result = (uint8_t *)uint8Array_cast(arg1);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_uint8Array_frompointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8Array *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_uint8Array_frompointer.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint8Array_frompointer" "', argument " "1"" of type '" "uint8_t *""'"); 
  }
  arg1 = (uint8_t *)(argp1);
  {
    try {
      result = (uint8Array *)uint8Array_frompointer(arg1);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8Array, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DISPLAY_CMD_OFF_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::DISPLAY_CMD_OFF;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_DISPLAY_CMD_ON_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::DISPLAY_CMD_ON;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_BASE_LOW_COLUMN_ADDR_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::BASE_LOW_COLUMN_ADDR;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_BASE_HIGH_COLUMN_ADDR_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::BASE_HIGH_COLUMN_ADDR;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_BASE_PAGE_START_ADDR_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::BASE_PAGE_START_ADDR;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_DISPLAY_CMD_MEM_ADDR_MODE_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::DISPLAY_CMD_MEM_ADDR_MODE;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_BasicFont_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t (*result)[8] = 0 ;
  
  result = (uint8_t (*)[8])(uint8_t (*)[8])upm::BasicFont;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_8__unsigned_char, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_upm_HORIZONTAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(upm::HORIZONTAL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_upm_VERTICAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(upm::VERTICAL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_upm_PAGE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(upm::PAGE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_LCD(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_LCD(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_LCD(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_LCD(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          upm::LCD * arg1 = (upm::LCD *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_LCD_write__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::LCD *arg1 = (upm::LCD *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mraa::Result result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__LCD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LCD_write" "', argument " "1"" of type '" "upm::LCD *""'"); 
  }
  arg1 = (upm::LCD *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LCD_write" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LCD_write" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "LCD_write" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->write(arg2,arg3,arg4);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LCD_write__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::LCD *arg1 = (upm::LCD *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__LCD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LCD_write" "', argument " "1"" of type '" "upm::LCD *""'"); 
  }
  arg1 = (upm::LCD *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "LCD_write" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->write(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LCD__wrap_LCD_write(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_LCD_write__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_LCD_write__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_LCD_write__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_LCD_write__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function write.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LCD_setCursor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::LCD *arg1 = (upm::LCD *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LCD_setCursor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__LCD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LCD_setCursor" "', argument " "1"" of type '" "upm::LCD *""'"); 
  }
  arg1 = (upm::LCD *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LCD_setCursor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LCD_setCursor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    try {
      result = (arg1)->setCursor(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LCD_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::LCD *arg1 = (upm::LCD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LCD_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__LCD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LCD_clear" "', argument " "1"" of type '" "upm::LCD *""'"); 
  }
  arg1 = (upm::LCD *)(argp1);
  {
    try {
      result = (arg1)->clear();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LCD_home(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::LCD *arg1 = (upm::LCD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LCD_home.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__LCD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LCD_home" "', argument " "1"" of type '" "upm::LCD *""'"); 
  }
  arg1 = (upm::LCD *)(argp1);
  {
    try {
      result = (arg1)->home();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LCD_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::LCD *arg1 = (upm::LCD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LCD_name.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__LCD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LCD_name" "', argument " "1"" of type '" "upm::LCD *""'"); 
  }
  arg1 = (upm::LCD *)(argp1);
  {
    try {
      result = (arg1)->name();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_LCD(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class LCD can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Lcm1602__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  upm::Lcm1602 *result;
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Lcm1602__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Lcm1602" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Lcm1602" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Lcm1602" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Lcm1602" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Lcm1602" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  {
    try {
      result = (upm::Lcm1602 *)new upm::Lcm1602(arg1,arg2,arg3,arg4,arg5);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__Lcm1602, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Lcm1602__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  uint8_t arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  upm::Lcm1602 *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Lcm1602__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Lcm1602" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Lcm1602" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Lcm1602" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Lcm1602" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  {
    try {
      result = (upm::Lcm1602 *)new upm::Lcm1602(arg1,arg2,arg3,arg4);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__Lcm1602, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Lcm1602__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  upm::Lcm1602 *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Lcm1602__SWIG_2.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Lcm1602" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Lcm1602" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Lcm1602" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  {
    try {
      result = (upm::Lcm1602 *)new upm::Lcm1602(arg1,arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__Lcm1602, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Lcm1602__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  upm::Lcm1602 *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Lcm1602__SWIG_3.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Lcm1602" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Lcm1602" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (upm::Lcm1602 *)new upm::Lcm1602(arg1,arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__Lcm1602, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Lcm1602__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  upm::Lcm1602 *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Lcm1602__SWIG_4.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Lcm1602" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (upm::Lcm1602 *)new upm::Lcm1602(arg1);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__Lcm1602, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Lcm1602__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  upm::Lcm1602 *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Lcm1602__SWIG_5.");
  {
    try {
      result = (upm::Lcm1602 *)new upm::Lcm1602();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__Lcm1602, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Lcm1602__SWIG_6(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  uint8_t arg7 ;
  uint8_t arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  upm::Lcm1602 *result;
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Lcm1602__SWIG_6.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Lcm1602" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Lcm1602" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Lcm1602" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Lcm1602" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Lcm1602" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Lcm1602" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Lcm1602" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = (uint8_t)(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_Lcm1602" "', argument " "8"" of type '" "uint8_t""'");
  } 
  arg8 = (uint8_t)(val8);
  {
    try {
      result = (upm::Lcm1602 *)new upm::Lcm1602(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__Lcm1602, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Lcm1602__SWIG_7(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  uint8_t arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  upm::Lcm1602 *result;
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Lcm1602__SWIG_7.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Lcm1602" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Lcm1602" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Lcm1602" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Lcm1602" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Lcm1602" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Lcm1602" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Lcm1602" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = (uint8_t)(val7);
  {
    try {
      result = (upm::Lcm1602 *)new upm::Lcm1602(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__Lcm1602, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Lcm1602__SWIG_8(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  upm::Lcm1602 *result;
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Lcm1602__SWIG_8.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Lcm1602" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Lcm1602" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Lcm1602" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Lcm1602" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Lcm1602" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Lcm1602" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  {
    try {
      result = (upm::Lcm1602 *)new upm::Lcm1602(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__Lcm1602, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Lcm1602(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Lcm1602__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Lcm1602__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Lcm1602__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Lcm1602__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Lcm1602__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Lcm1602__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Lcm1602__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Lcm1602__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Lcm1602__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Lcm1602__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Lcm1602__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Lcm1602__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Lcm1602__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Lcm1602__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Lcm1602__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Lcm1602__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Lcm1602__SWIG_8(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Lcm1602__SWIG_8(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Lcm1602");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Lcm1602(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Lcm1602(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Lcm1602(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Lcm1602(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          upm::Lcm1602 * arg1 = (upm::Lcm1602 *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Lcm1602_write(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_write.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_write" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Lcm1602_write" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->write(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_setCursor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_setCursor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_setCursor" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lcm1602_setCursor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Lcm1602_setCursor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    try {
      result = (arg1)->setCursor(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_clear" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->clear();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_home(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_home.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_home" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->home();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_createChar(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  uint8_t arg2 ;
  uint8_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_createChar.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_createChar" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lcm1602_createChar" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Lcm1602_createChar" "', argument " "3"" of type '" "uint8_t []""'"); 
  } 
  arg3 = (uint8_t *)(argp3);
  {
    try {
      result = (arg1)->createChar(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_displayOn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_displayOn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_displayOn" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->displayOn();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_displayOff(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_displayOff.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_displayOff" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->displayOff();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_cursorOn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_cursorOn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_cursorOn" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->cursorOn();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_cursorOff(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_cursorOff.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_cursorOff" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->cursorOff();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_cursorBlinkOn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_cursorBlinkOn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_cursorBlinkOn" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->cursorBlinkOn();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_cursorBlinkOff(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_cursorBlinkOff.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_cursorBlinkOff" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->cursorBlinkOff();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_backlightOn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_backlightOn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_backlightOn" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->backlightOn();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_backlightOff(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_backlightOff.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_backlightOff" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->backlightOff();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_scrollDisplayLeft(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_scrollDisplayLeft.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_scrollDisplayLeft" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->scrollDisplayLeft();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_scrollDisplayRight(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_scrollDisplayRight.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_scrollDisplayRight" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->scrollDisplayRight();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_entryLeftToRight(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_entryLeftToRight.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_entryLeftToRight" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->entryLeftToRight();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_entryRightToLeft(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_entryRightToLeft.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_entryRightToLeft" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->entryRightToLeft();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_autoscrollOn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_autoscrollOn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_autoscrollOn" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->autoscrollOn();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lcm1602_autoscrollOff(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Lcm1602 *arg1 = (upm::Lcm1602 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lcm1602_autoscrollOff.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Lcm1602, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lcm1602_autoscrollOff" "', argument " "1"" of type '" "upm::Lcm1602 *""'"); 
  }
  arg1 = (upm::Lcm1602 *)(argp1);
  {
    try {
      result = (arg1)->autoscrollOff();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Jhd1313m1__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  upm::Jhd1313m1 *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Jhd1313m1__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Jhd1313m1" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Jhd1313m1" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Jhd1313m1" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    try {
      result = (upm::Jhd1313m1 *)new upm::Jhd1313m1(arg1,arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__Jhd1313m1, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Jhd1313m1__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  upm::Jhd1313m1 *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Jhd1313m1__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Jhd1313m1" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Jhd1313m1" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (upm::Jhd1313m1 *)new upm::Jhd1313m1(arg1,arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__Jhd1313m1, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Jhd1313m1__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  upm::Jhd1313m1 *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Jhd1313m1__SWIG_2.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Jhd1313m1" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (upm::Jhd1313m1 *)new upm::Jhd1313m1(arg1);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__Jhd1313m1, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Jhd1313m1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Jhd1313m1__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Jhd1313m1__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Jhd1313m1__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Jhd1313m1__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Jhd1313m1__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Jhd1313m1__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Jhd1313m1");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Jhd1313m1(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Jhd1313m1(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Jhd1313m1(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Jhd1313m1(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          upm::Jhd1313m1 * arg1 = (upm::Jhd1313m1 *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Jhd1313m1_scroll(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Jhd1313m1 *arg1 = (upm::Jhd1313m1 *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Jhd1313m1_scroll.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Jhd1313m1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jhd1313m1_scroll" "', argument " "1"" of type '" "upm::Jhd1313m1 *""'"); 
  }
  arg1 = (upm::Jhd1313m1 *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Jhd1313m1_scroll" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  {
    try {
      result = (arg1)->scroll(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Jhd1313m1_setColor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Jhd1313m1 *arg1 = (upm::Jhd1313m1 *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Jhd1313m1_setColor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Jhd1313m1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jhd1313m1_setColor" "', argument " "1"" of type '" "upm::Jhd1313m1 *""'"); 
  }
  arg1 = (upm::Jhd1313m1 *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Jhd1313m1_setColor" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Jhd1313m1_setColor" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Jhd1313m1_setColor" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  {
    try {
      result = (arg1)->setColor(arg2,arg3,arg4);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Jhd1313m1_backlightOn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Jhd1313m1 *arg1 = (upm::Jhd1313m1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Jhd1313m1_backlightOn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Jhd1313m1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jhd1313m1_backlightOn" "', argument " "1"" of type '" "upm::Jhd1313m1 *""'"); 
  }
  arg1 = (upm::Jhd1313m1 *)(argp1);
  {
    try {
      result = (arg1)->backlightOn();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Jhd1313m1_backlightOff(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::Jhd1313m1 *arg1 = (upm::Jhd1313m1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Jhd1313m1_backlightOff.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__Jhd1313m1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jhd1313m1_backlightOff" "', argument " "1"" of type '" "upm::Jhd1313m1 *""'"); 
  }
  arg1 = (upm::Jhd1313m1 *)(argp1);
  {
    try {
      result = (arg1)->backlightOff();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DISPLAY_CMD_SET_NORMAL_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::DISPLAY_CMD_SET_NORMAL;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_SSD1327__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  upm::SSD1327 *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SSD1327__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SSD1327" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SSD1327" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (upm::SSD1327 *)new upm::SSD1327(arg1,arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SSD1327, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SSD1327__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  upm::SSD1327 *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SSD1327__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SSD1327" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (upm::SSD1327 *)new upm::SSD1327(arg1);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SSD1327, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SSD1327(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SSD1327__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SSD1327__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SSD1327__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SSD1327__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_SSD1327");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_SSD1327(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_SSD1327(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_SSD1327(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_SSD1327(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          upm::SSD1327 * arg1 = (upm::SSD1327 *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_SSD1327_draw(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1327 *arg1 = (upm::SSD1327 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1327_draw.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1327, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1327_draw" "', argument " "1"" of type '" "upm::SSD1327 *""'"); 
  }
  arg1 = (upm::SSD1327 *)(argp1);
  {
    void *argp = 0 ;
    int res = SWIG_ConvertPtr(args[0], &argp,SWIGTYPE_p_uint8Array, 0 |  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "failed to convert input to uint8");
    }
    arg2 = (uint8_t *)(argp);
  }
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SSD1327_draw" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    try {
      result = (arg1)->draw(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1327_setGrayLevel(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1327 *arg1 = (upm::SSD1327 *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1327_setGrayLevel.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1327, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1327_setGrayLevel" "', argument " "1"" of type '" "upm::SSD1327 *""'"); 
  }
  arg1 = (upm::SSD1327 *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SSD1327_setGrayLevel" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  {
    try {
      (arg1)->setGrayLevel(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1327_write(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1327 *arg1 = (upm::SSD1327 *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1327_write.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1327, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1327_write" "', argument " "1"" of type '" "upm::SSD1327 *""'"); 
  }
  arg1 = (upm::SSD1327 *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SSD1327_write" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->write(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1327_setCursor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1327 *arg1 = (upm::SSD1327 *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1327_setCursor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1327, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1327_setCursor" "', argument " "1"" of type '" "upm::SSD1327 *""'"); 
  }
  arg1 = (upm::SSD1327 *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SSD1327_setCursor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SSD1327_setCursor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    try {
      result = (arg1)->setCursor(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1327_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1327 *arg1 = (upm::SSD1327 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1327_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1327, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1327_clear" "', argument " "1"" of type '" "upm::SSD1327 *""'"); 
  }
  arg1 = (upm::SSD1327 *)(argp1);
  {
    try {
      result = (arg1)->clear();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1327_home(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1327 *arg1 = (upm::SSD1327 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1327_home.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1327, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1327_home" "', argument " "1"" of type '" "upm::SSD1327 *""'"); 
  }
  arg1 = (upm::SSD1327 *)(argp1);
  {
    try {
      result = (arg1)->home();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DISPLAY_CMD_SET_NORMAL_1308_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::DISPLAY_CMD_SET_NORMAL_1308;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_SSD1308__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  upm::SSD1308 *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SSD1308__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SSD1308" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SSD1308" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (upm::SSD1308 *)new upm::SSD1308(arg1,arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SSD1308, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SSD1308__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  upm::SSD1308 *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SSD1308__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SSD1308" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (upm::SSD1308 *)new upm::SSD1308(arg1);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SSD1308, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SSD1308(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SSD1308__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SSD1308__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SSD1308__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SSD1308__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_SSD1308");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_SSD1308(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_SSD1308(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_SSD1308(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_SSD1308(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          upm::SSD1308 * arg1 = (upm::SSD1308 *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_SSD1308_draw(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1308 *arg1 = (upm::SSD1308 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1308_draw.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1308, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1308_draw" "', argument " "1"" of type '" "upm::SSD1308 *""'"); 
  }
  arg1 = (upm::SSD1308 *)(argp1);
  {
    void *argp = 0 ;
    int res = SWIG_ConvertPtr(args[0], &argp,SWIGTYPE_p_uint8Array, 0 |  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "failed to convert input to uint8");
    }
    arg2 = (uint8_t *)(argp);
  }
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SSD1308_draw" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    try {
      result = (arg1)->draw(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1308_write(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1308 *arg1 = (upm::SSD1308 *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1308_write.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1308, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1308_write" "', argument " "1"" of type '" "upm::SSD1308 *""'"); 
  }
  arg1 = (upm::SSD1308 *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SSD1308_write" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->write(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1308_setCursor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1308 *arg1 = (upm::SSD1308 *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1308_setCursor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1308, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1308_setCursor" "', argument " "1"" of type '" "upm::SSD1308 *""'"); 
  }
  arg1 = (upm::SSD1308 *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SSD1308_setCursor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SSD1308_setCursor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    try {
      result = (arg1)->setCursor(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1308_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1308 *arg1 = (upm::SSD1308 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1308_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1308, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1308_clear" "', argument " "1"" of type '" "upm::SSD1308 *""'"); 
  }
  arg1 = (upm::SSD1308 *)(argp1);
  {
    try {
      result = (arg1)->clear();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1308_home(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1308 *arg1 = (upm::SSD1308 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1308_home.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1308, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1308_home" "', argument " "1"" of type '" "upm::SSD1308 *""'"); 
  }
  arg1 = (upm::SSD1308 *)(argp1);
  {
    try {
      result = (arg1)->home();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_DEFAULT_SPI_BUS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_EBOLED_DEFAULT_CD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(36));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_EBOLED_DEFAULT_RESET(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(48));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_COLOR_WHITE_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::COLOR_WHITE;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_COLOR_BLACK_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::COLOR_BLACK;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_COLOR_XOR_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::COLOR_XOR;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OLED_WIDTH_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::OLED_WIDTH;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_VERT_COLUMNS_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::VERT_COLUMNS;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OLED_HEIGHT_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::OLED_HEIGHT;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_BUFFER_SIZE_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int result;
  
  result = (int)(int)upm::BUFFER_SIZE;
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_EBOLED__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  upm::EBOLED *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_EBOLED__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_EBOLED" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EBOLED" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_EBOLED" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    try {
      result = (upm::EBOLED *)new upm::EBOLED(arg1,arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__EBOLED, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_EBOLED__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  upm::EBOLED *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_EBOLED__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_EBOLED" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EBOLED" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (upm::EBOLED *)new upm::EBOLED(arg1,arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__EBOLED, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_EBOLED__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  upm::EBOLED *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_EBOLED__SWIG_2.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_EBOLED" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (upm::EBOLED *)new upm::EBOLED(arg1);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__EBOLED, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_EBOLED__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  upm::EBOLED *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_EBOLED__SWIG_3.");
  {
    try {
      result = (upm::EBOLED *)new upm::EBOLED();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__EBOLED, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_EBOLED(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_EBOLED__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_EBOLED__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_EBOLED__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_EBOLED__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_EBOLED__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_EBOLED__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_EBOLED__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_EBOLED__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_EBOLED");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_EBOLED(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_EBOLED(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_EBOLED(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_EBOLED(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          upm::EBOLED * arg1 = (upm::EBOLED *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_EBOLED_refresh(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_refresh.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_refresh" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  {
    try {
      result = (arg1)->refresh();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_write(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_write.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_write" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "EBOLED_write" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->write(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_setCursor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_setCursor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_setCursor" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_setCursor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_setCursor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    try {
      result = (arg1)->setCursor(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_setTextColor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_setTextColor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_setTextColor" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_setTextColor" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  {
    try {
      (arg1)->setTextColor(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_setTextSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_setTextSize.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_setTextSize" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_setTextSize" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  {
    try {
      (arg1)->setTextSize(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_setTextWrap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_setTextWrap.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_setTextWrap" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_setTextWrap" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  {
    try {
      (arg1)->setTextWrap(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawChar(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_drawChar.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawChar" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawChar" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawChar" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawChar" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawChar" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EBOLED_drawChar" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = (uint8_t)(val6);
  {
    try {
      (arg1)->drawChar(arg2,arg3,arg4,arg5,arg6);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_clear" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  {
    try {
      result = (arg1)->clear();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_clearScreenBuffer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_clearScreenBuffer.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_clearScreenBuffer" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  {
    try {
      (arg1)->clearScreenBuffer();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_home(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_home.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_home" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  {
    try {
      result = (arg1)->home();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawPixel__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  uint8_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawPixel" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawPixel" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawPixel" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawPixel" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  {
    try {
      (arg1)->drawPixel(arg2,arg3,arg4);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawPixel__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawPixel" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawPixel" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawPixel" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  {
    try {
      (arg1)->drawPixel(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED__wrap_EBOLED_drawPixel(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawPixel__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawPixel__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawPixel__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawPixel__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function drawPixel.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawLine__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  int8_t arg4 ;
  int8_t arg5 ;
  uint8_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  signed char val4 ;
  int ecode4 = 0 ;
  signed char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawLine" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawLine" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawLine" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_signed_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawLine" "', argument " "4"" of type '" "int8_t""'");
  } 
  arg4 = (int8_t)(val4);
  ecode5 = SWIG_AsVal_signed_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawLine" "', argument " "5"" of type '" "int8_t""'");
  } 
  arg5 = (int8_t)(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EBOLED_drawLine" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = (uint8_t)(val6);
  {
    try {
      (arg1)->drawLine(arg2,arg3,arg4,arg5,arg6);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawLine__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  int8_t arg4 ;
  int8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  signed char val4 ;
  int ecode4 = 0 ;
  signed char val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawLine" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawLine" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawLine" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_signed_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawLine" "', argument " "4"" of type '" "int8_t""'");
  } 
  arg4 = (int8_t)(val4);
  ecode5 = SWIG_AsVal_signed_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawLine" "', argument " "5"" of type '" "int8_t""'");
  } 
  arg5 = (int8_t)(val5);
  {
    try {
      (arg1)->drawLine(arg2,arg3,arg4,arg5);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED__wrap_EBOLED_drawLine(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawLine__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawLine__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawLine__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawLine__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function drawLine.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawLineHorizontal__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawLineHorizontal" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawLineHorizontal" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawLineHorizontal" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawLineHorizontal" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawLineHorizontal" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  {
    try {
      (arg1)->drawLineHorizontal(arg2,arg3,arg4,arg5);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawLineHorizontal__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  uint8_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawLineHorizontal" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawLineHorizontal" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawLineHorizontal" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawLineHorizontal" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  {
    try {
      (arg1)->drawLineHorizontal(arg2,arg3,arg4);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED__wrap_EBOLED_drawLineHorizontal(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawLineHorizontal__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawLineHorizontal__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawLineHorizontal__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawLineHorizontal__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function drawLineHorizontal.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawLineVertical__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawLineVertical" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawLineVertical" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawLineVertical" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawLineVertical" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawLineVertical" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  {
    try {
      (arg1)->drawLineVertical(arg2,arg3,arg4,arg5);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawLineVertical__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  uint8_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawLineVertical" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawLineVertical" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawLineVertical" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawLineVertical" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  {
    try {
      (arg1)->drawLineVertical(arg2,arg3,arg4);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED__wrap_EBOLED_drawLineVertical(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawLineVertical__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawLineVertical__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawLineVertical__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawLineVertical__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function drawLineVertical.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawRectangle__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawRectangle" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawRectangle" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawRectangle" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawRectangle" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawRectangle" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EBOLED_drawRectangle" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = (uint8_t)(val6);
  {
    try {
      (arg1)->drawRectangle(arg2,arg3,arg4,arg5,arg6);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawRectangle__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawRectangle" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawRectangle" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawRectangle" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawRectangle" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawRectangle" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  {
    try {
      (arg1)->drawRectangle(arg2,arg3,arg4,arg5);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED__wrap_EBOLED_drawRectangle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawRectangle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawRectangle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawRectangle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawRectangle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function drawRectangle.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawRoundedRectangle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  int8_t arg4 ;
  int8_t arg5 ;
  int16_t arg6 ;
  uint8_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  signed char val4 ;
  int ecode4 = 0 ;
  signed char val5 ;
  int ecode5 = 0 ;
  short val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_drawRoundedRectangle.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawRoundedRectangle" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawRoundedRectangle" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawRoundedRectangle" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_signed_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawRoundedRectangle" "', argument " "4"" of type '" "int8_t""'");
  } 
  arg4 = (int8_t)(val4);
  ecode5 = SWIG_AsVal_signed_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawRoundedRectangle" "', argument " "5"" of type '" "int8_t""'");
  } 
  arg5 = (int8_t)(val5);
  ecode6 = SWIG_AsVal_short(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EBOLED_drawRoundedRectangle" "', argument " "6"" of type '" "int16_t""'");
  } 
  arg6 = (int16_t)(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "EBOLED_drawRoundedRectangle" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = (uint8_t)(val7);
  {
    try {
      (arg1)->drawRoundedRectangle(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawRectangleFilled__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawRectangleFilled" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawRectangleFilled" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawRectangleFilled" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawRectangleFilled" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawRectangleFilled" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EBOLED_drawRectangleFilled" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = (uint8_t)(val6);
  {
    try {
      (arg1)->drawRectangleFilled(arg2,arg3,arg4,arg5,arg6);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawRectangleFilled__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawRectangleFilled" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawRectangleFilled" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawRectangleFilled" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawRectangleFilled" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = (uint8_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawRectangleFilled" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  {
    try {
      (arg1)->drawRectangleFilled(arg2,arg3,arg4,arg5);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED__wrap_EBOLED_drawRectangleFilled(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawRectangleFilled__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawRectangleFilled__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawRectangleFilled__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawRectangleFilled__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function drawRectangleFilled.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawTriangle__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  int8_t arg4 ;
  int8_t arg5 ;
  int8_t arg6 ;
  int8_t arg7 ;
  uint8_t arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  signed char val4 ;
  int ecode4 = 0 ;
  signed char val5 ;
  int ecode5 = 0 ;
  signed char val6 ;
  int ecode6 = 0 ;
  signed char val7 ;
  int ecode7 = 0 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawTriangle" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawTriangle" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawTriangle" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_signed_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawTriangle" "', argument " "4"" of type '" "int8_t""'");
  } 
  arg4 = (int8_t)(val4);
  ecode5 = SWIG_AsVal_signed_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawTriangle" "', argument " "5"" of type '" "int8_t""'");
  } 
  arg5 = (int8_t)(val5);
  ecode6 = SWIG_AsVal_signed_SS_char(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EBOLED_drawTriangle" "', argument " "6"" of type '" "int8_t""'");
  } 
  arg6 = (int8_t)(val6);
  ecode7 = SWIG_AsVal_signed_SS_char(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "EBOLED_drawTriangle" "', argument " "7"" of type '" "int8_t""'");
  } 
  arg7 = (int8_t)(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "EBOLED_drawTriangle" "', argument " "8"" of type '" "uint8_t""'");
  } 
  arg8 = (uint8_t)(val8);
  {
    try {
      (arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawTriangle__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  int8_t arg4 ;
  int8_t arg5 ;
  int8_t arg6 ;
  int8_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  signed char val4 ;
  int ecode4 = 0 ;
  signed char val5 ;
  int ecode5 = 0 ;
  signed char val6 ;
  int ecode6 = 0 ;
  signed char val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawTriangle" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawTriangle" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawTriangle" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_signed_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawTriangle" "', argument " "4"" of type '" "int8_t""'");
  } 
  arg4 = (int8_t)(val4);
  ecode5 = SWIG_AsVal_signed_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawTriangle" "', argument " "5"" of type '" "int8_t""'");
  } 
  arg5 = (int8_t)(val5);
  ecode6 = SWIG_AsVal_signed_SS_char(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EBOLED_drawTriangle" "', argument " "6"" of type '" "int8_t""'");
  } 
  arg6 = (int8_t)(val6);
  ecode7 = SWIG_AsVal_signed_SS_char(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "EBOLED_drawTriangle" "', argument " "7"" of type '" "int8_t""'");
  } 
  arg7 = (int8_t)(val7);
  {
    try {
      (arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED__wrap_EBOLED_drawTriangle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawTriangle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawTriangle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawTriangle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawTriangle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function drawTriangle.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawTriangleFilled(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  int8_t arg4 ;
  int8_t arg5 ;
  int8_t arg6 ;
  int8_t arg7 ;
  uint8_t arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  signed char val4 ;
  int ecode4 = 0 ;
  signed char val5 ;
  int ecode5 = 0 ;
  signed char val6 ;
  int ecode6 = 0 ;
  signed char val7 ;
  int ecode7 = 0 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_drawTriangleFilled.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawTriangleFilled" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawTriangleFilled" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawTriangleFilled" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_signed_SS_char(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawTriangleFilled" "', argument " "4"" of type '" "int8_t""'");
  } 
  arg4 = (int8_t)(val4);
  ecode5 = SWIG_AsVal_signed_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawTriangleFilled" "', argument " "5"" of type '" "int8_t""'");
  } 
  arg5 = (int8_t)(val5);
  ecode6 = SWIG_AsVal_signed_SS_char(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EBOLED_drawTriangleFilled" "', argument " "6"" of type '" "int8_t""'");
  } 
  arg6 = (int8_t)(val6);
  ecode7 = SWIG_AsVal_signed_SS_char(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "EBOLED_drawTriangleFilled" "', argument " "7"" of type '" "int8_t""'");
  } 
  arg7 = (int8_t)(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "EBOLED_drawTriangleFilled" "', argument " "8"" of type '" "uint8_t""'");
  } 
  arg8 = (uint8_t)(val8);
  {
    try {
      (arg1)->drawTriangleFilled(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawCircle__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int16_t arg2 ;
  int16_t arg3 ;
  int16_t arg4 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawCircle" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_short(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawCircle" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = (int16_t)(val2);
  ecode3 = SWIG_AsVal_short(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawCircle" "', argument " "3"" of type '" "int16_t""'");
  } 
  arg3 = (int16_t)(val3);
  ecode4 = SWIG_AsVal_short(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawCircle" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = (int16_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawCircle" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  {
    try {
      (arg1)->drawCircle(arg2,arg3,arg4,arg5);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawCircle__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int16_t arg2 ;
  int16_t arg3 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawCircle" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_short(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawCircle" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = (int16_t)(val2);
  ecode3 = SWIG_AsVal_short(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawCircle" "', argument " "3"" of type '" "int16_t""'");
  } 
  arg3 = (int16_t)(val3);
  ecode4 = SWIG_AsVal_short(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawCircle" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = (int16_t)(val4);
  {
    try {
      (arg1)->drawCircle(arg2,arg3,arg4);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED__wrap_EBOLED_drawCircle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawCircle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawCircle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_drawCircle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_drawCircle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function drawCircle.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawRoundCorners(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  int16_t arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_drawRoundCorners.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawRoundCorners" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawRoundCorners" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawRoundCorners" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_short(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawRoundCorners" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = (int16_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawRoundCorners" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EBOLED_drawRoundCorners" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = (uint8_t)(val6);
  {
    try {
      (arg1)->drawRoundCorners(arg2,arg3,arg4,arg5,arg6);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawCircleFilled(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  int16_t arg4 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_drawCircleFilled.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawCircleFilled" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawCircleFilled" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawCircleFilled" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_short(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawCircleFilled" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = (int16_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawCircleFilled" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  {
    try {
      (arg1)->drawCircleFilled(arg2,arg3,arg4,arg5);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_drawRoundedCornersFilled(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  int8_t arg2 ;
  int8_t arg3 ;
  int16_t arg4 ;
  uint8_t arg5 ;
  int16_t arg6 ;
  uint8_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  short val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EBOLED_drawRoundedCornersFilled.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_drawRoundedCornersFilled" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_drawRoundedCornersFilled" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = (int8_t)(val2);
  ecode3 = SWIG_AsVal_signed_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EBOLED_drawRoundedCornersFilled" "', argument " "3"" of type '" "int8_t""'");
  } 
  arg3 = (int8_t)(val3);
  ecode4 = SWIG_AsVal_short(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EBOLED_drawRoundedCornersFilled" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = (int16_t)(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EBOLED_drawRoundedCornersFilled" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = (uint8_t)(val5);
  ecode6 = SWIG_AsVal_short(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EBOLED_drawRoundedCornersFilled" "', argument " "6"" of type '" "int16_t""'");
  } 
  arg6 = (int16_t)(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "EBOLED_drawRoundedCornersFilled" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = (uint8_t)(val7);
  {
    try {
      (arg1)->drawRoundedCornersFilled(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_fillScreen__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_fillScreen" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EBOLED_fillScreen" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  {
    try {
      (arg1)->fillScreen(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED_fillScreen__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::EBOLED *arg1 = (upm::EBOLED *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__EBOLED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EBOLED_fillScreen" "', argument " "1"" of type '" "upm::EBOLED *""'"); 
  }
  arg1 = (upm::EBOLED *)(argp1);
  {
    try {
      (arg1)->fillScreen();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EBOLED__wrap_EBOLED_fillScreen(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_fillScreen__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_fillScreen__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EBOLED_fillScreen__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EBOLED_fillScreen__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function fillScreen.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SAINSMARTKS__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  upm::SAINSMARTKS *result;
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SAINSMARTKS__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SAINSMARTKS" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SAINSMARTKS" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SAINSMARTKS" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SAINSMARTKS" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SAINSMARTKS" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SAINSMARTKS" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  ecode7 = SWIG_AsVal_int(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SAINSMARTKS" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = (int)(val7);
  {
    try {
      result = (upm::SAINSMARTKS *)new upm::SAINSMARTKS(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SAINSMARTKS, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SAINSMARTKS__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  upm::SAINSMARTKS *result;
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SAINSMARTKS__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SAINSMARTKS" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SAINSMARTKS" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SAINSMARTKS" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SAINSMARTKS" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SAINSMARTKS" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ecode6 = SWIG_AsVal_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SAINSMARTKS" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  {
    try {
      result = (upm::SAINSMARTKS *)new upm::SAINSMARTKS(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SAINSMARTKS, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SAINSMARTKS__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  upm::SAINSMARTKS *result;
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SAINSMARTKS__SWIG_2.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SAINSMARTKS" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SAINSMARTKS" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SAINSMARTKS" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SAINSMARTKS" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SAINSMARTKS" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  {
    try {
      result = (upm::SAINSMARTKS *)new upm::SAINSMARTKS(arg1,arg2,arg3,arg4,arg5);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SAINSMARTKS, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SAINSMARTKS__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  upm::SAINSMARTKS *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SAINSMARTKS__SWIG_3.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SAINSMARTKS" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SAINSMARTKS" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SAINSMARTKS" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SAINSMARTKS" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    try {
      result = (upm::SAINSMARTKS *)new upm::SAINSMARTKS(arg1,arg2,arg3,arg4);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SAINSMARTKS, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SAINSMARTKS__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  upm::SAINSMARTKS *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SAINSMARTKS__SWIG_4.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SAINSMARTKS" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SAINSMARTKS" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SAINSMARTKS" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    try {
      result = (upm::SAINSMARTKS *)new upm::SAINSMARTKS(arg1,arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SAINSMARTKS, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SAINSMARTKS__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  upm::SAINSMARTKS *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SAINSMARTKS__SWIG_5.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SAINSMARTKS" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SAINSMARTKS" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (upm::SAINSMARTKS *)new upm::SAINSMARTKS(arg1,arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SAINSMARTKS, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SAINSMARTKS__SWIG_6(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  upm::SAINSMARTKS *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SAINSMARTKS__SWIG_6.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SAINSMARTKS" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (upm::SAINSMARTKS *)new upm::SAINSMARTKS(arg1);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SAINSMARTKS, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SAINSMARTKS__SWIG_7(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  upm::SAINSMARTKS *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SAINSMARTKS__SWIG_7.");
  {
    try {
      result = (upm::SAINSMARTKS *)new upm::SAINSMARTKS();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SAINSMARTKS, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SAINSMARTKS(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SAINSMARTKS__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SAINSMARTKS__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SAINSMARTKS__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SAINSMARTKS__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SAINSMARTKS__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SAINSMARTKS__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SAINSMARTKS__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SAINSMARTKS__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SAINSMARTKS__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SAINSMARTKS__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SAINSMARTKS__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SAINSMARTKS__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SAINSMARTKS__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SAINSMARTKS__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SAINSMARTKS__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SAINSMARTKS__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_SAINSMARTKS");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_SAINSMARTKS(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_SAINSMARTKS(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_SAINSMARTKS(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_SAINSMARTKS(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          upm::SAINSMARTKS * arg1 = (upm::SAINSMARTKS *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_SAINSMARTKS_getRawKeyValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SAINSMARTKS *arg1 = (upm::SAINSMARTKS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SAINSMARTKS_getRawKeyValue.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SAINSMARTKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAINSMARTKS_getRawKeyValue" "', argument " "1"" of type '" "upm::SAINSMARTKS *""'"); 
  }
  arg1 = (upm::SAINSMARTKS *)(argp1);
  {
    try {
      result = (float)(arg1)->getRawKeyValue();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DISPLAY_CMD_SET_NORMAL_1306_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::DISPLAY_CMD_SET_NORMAL_1306;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_SETCONTRAST_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_SETCONTRAST;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_DISPLAYALLON_RESUME_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_DISPLAYALLON_RESUME;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_DISPLAYALLON_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_DISPLAYALLON;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_DISPLAY_CMD_SET_INVERT_1306_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::DISPLAY_CMD_SET_INVERT_1306;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_SETDISPLAYOFFSET_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_SETDISPLAYOFFSET;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_SETCOMPINS_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_SETCOMPINS;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_SETVCOMDETECT_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_SETVCOMDETECT;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_SETDISPLAYCLOCKDIV_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_SETDISPLAYCLOCKDIV;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_SETPRECHARGE_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_SETPRECHARGE;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_SETMULTIPLEX_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_SETMULTIPLEX;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_SETLOWCOLUM_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_SETLOWCOLUM;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_SETHIGHCOLUMN_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_SETHIGHCOLUMN;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_SETSTARTLINE_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_SETSTARTLINE;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_MEMORYMODE_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_MEMORYMODE;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_COLUMNADDR_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_COLUMNADDR;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_PAGEADDR_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_PAGEADDR;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_COMSCANINC_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_COMSCANINC;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_COMSCANDEC_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_COMSCANDEC;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_SEGREMAP_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_SEGREMAP;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_CHARGEPUMP_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_CHARGEPUMP;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_EXTERNALVCC_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_EXTERNALVCC;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_SWITCHCAPVCC_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_SWITCHCAPVCC;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_ACTIVATE_SCROLL_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_ACTIVATE_SCROLL;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_DEACTIVATE_SCROLL_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_DEACTIVATE_SCROLL;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_SET_VERTICAL_SCROLL_AREA_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_SET_VERTICAL_SCROLL_AREA;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_RIGHT_HORIZONTAL_SCROLL_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_RIGHT_HORIZONTAL_SCROLL;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_LEFT_HORIZONTAL_SCROLL_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_LEFT_HORIZONTAL_SCROLL;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_BLACK_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_BLACK;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_WHITE_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_WHITE;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_LCDWIDTH_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_LCDWIDTH;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SSD1306_LCDHEIGHT_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t result;
  
  result = (uint8_t)(uint8_t)upm::SSD1306_LCDHEIGHT;
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_SSD1306__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  upm::SSD1306 *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SSD1306__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SSD1306" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SSD1306" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (upm::SSD1306 *)new upm::SSD1306(arg1,arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SSD1306, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SSD1306__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  upm::SSD1306 *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SSD1306__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SSD1306" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (upm::SSD1306 *)new upm::SSD1306(arg1);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_upm__SSD1306, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SSD1306(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SSD1306__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SSD1306__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SSD1306__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SSD1306__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_SSD1306");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_SSD1306(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_SSD1306(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_SSD1306(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_SSD1306(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          upm::SSD1306 * arg1 = (upm::SSD1306 *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_SSD1306_draw(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1306 *arg1 = (upm::SSD1306 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1306_draw.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1306, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1306_draw" "', argument " "1"" of type '" "upm::SSD1306 *""'"); 
  }
  arg1 = (upm::SSD1306 *)(argp1);
  {
    void *argp = 0 ;
    int res = SWIG_ConvertPtr(args[0], &argp,SWIGTYPE_p_uint8Array, 0 |  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "failed to convert input to uint8");
    }
    arg2 = (uint8_t *)(argp);
  }
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SSD1306_draw" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    try {
      result = (arg1)->draw(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1306_write(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1306 *arg1 = (upm::SSD1306 *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1306_write.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1306, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1306_write" "', argument " "1"" of type '" "upm::SSD1306 *""'"); 
  }
  arg1 = (upm::SSD1306 *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SSD1306_write" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->write(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1306_setCursor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1306 *arg1 = (upm::SSD1306 *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1306_setCursor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1306, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1306_setCursor" "', argument " "1"" of type '" "upm::SSD1306 *""'"); 
  }
  arg1 = (upm::SSD1306 *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SSD1306_setCursor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SSD1306_setCursor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    try {
      result = (arg1)->setCursor(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1306_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1306 *arg1 = (upm::SSD1306 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1306_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1306, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1306_clear" "', argument " "1"" of type '" "upm::SSD1306 *""'"); 
  }
  arg1 = (upm::SSD1306 *)(argp1);
  {
    try {
      result = (arg1)->clear();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1306_home(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1306 *arg1 = (upm::SSD1306 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1306_home.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1306, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1306_home" "', argument " "1"" of type '" "upm::SSD1306 *""'"); 
  }
  arg1 = (upm::SSD1306 *)(argp1);
  {
    try {
      result = (arg1)->home();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1306_invert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1306 *arg1 = (upm::SSD1306 *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mraa::Result result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1306_invert.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1306, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1306_invert" "', argument " "1"" of type '" "upm::SSD1306 *""'"); 
  }
  arg1 = (upm::SSD1306 *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SSD1306_invert" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  {
    try {
      result = (arg1)->invert(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1306_startscrollright(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1306 *arg1 = (upm::SSD1306 *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1306_startscrollright.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1306, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1306_startscrollright" "', argument " "1"" of type '" "upm::SSD1306 *""'"); 
  }
  arg1 = (upm::SSD1306 *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SSD1306_startscrollright" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SSD1306_startscrollright" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  {
    try {
      (arg1)->startscrollright(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1306_startscrollleft(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1306 *arg1 = (upm::SSD1306 *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1306_startscrollleft.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1306, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1306_startscrollleft" "', argument " "1"" of type '" "upm::SSD1306 *""'"); 
  }
  arg1 = (upm::SSD1306 *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SSD1306_startscrollleft" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SSD1306_startscrollleft" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  {
    try {
      (arg1)->startscrollleft(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1306_startscrolldiagright(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1306 *arg1 = (upm::SSD1306 *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1306_startscrolldiagright.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1306, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1306_startscrolldiagright" "', argument " "1"" of type '" "upm::SSD1306 *""'"); 
  }
  arg1 = (upm::SSD1306 *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SSD1306_startscrolldiagright" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SSD1306_startscrolldiagright" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  {
    try {
      (arg1)->startscrolldiagright(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1306_startscrolldiagleft(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1306 *arg1 = (upm::SSD1306 *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1306_startscrolldiagleft.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1306, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1306_startscrolldiagleft" "', argument " "1"" of type '" "upm::SSD1306 *""'"); 
  }
  arg1 = (upm::SSD1306 *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SSD1306_startscrolldiagleft" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SSD1306_startscrolldiagleft" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  {
    try {
      (arg1)->startscrolldiagleft(arg2,arg3);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1306_stopscroll(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1306 *arg1 = (upm::SSD1306 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1306_stopscroll.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1306, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1306_stopscroll" "', argument " "1"" of type '" "upm::SSD1306 *""'"); 
  }
  arg1 = (upm::SSD1306 *)(argp1);
  {
    try {
      (arg1)->stopscroll();
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SSD1306_dim(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  upm::SSD1306 *arg1 = (upm::SSD1306 *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SSD1306_dim.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_upm__SSD1306, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SSD1306_dim" "', argument " "1"" of type '" "upm::SSD1306 *""'"); 
  }
  arg1 = (upm::SSD1306 *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SSD1306_dim" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  {
    try {
      (arg1)->dim(arg2);
    } catch (std::invalid_argument& e) {
      std::string s1("UPM Invalid Argument: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str());
      
    } catch (std::domain_error& e) {
      std::string s1("UPM Domain Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_ValueError, s1.c_str() );
      
    } catch (std::overflow_error& e) {
      std::string s1("UPM Overflow Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_OverflowError, s1.c_str() );
      
    } catch (std::out_of_range& e) {
      std::string s1("UPM Out of Range: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::length_error& e) {
      std::string s1("UPM Length Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_IndexError, s1.c_str() );
      
    } catch (std::logic_error& e) {
      std::string s1("UPM Logic Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str() );
      
    } catch (std::bad_alloc& e) {
      /* for an allocation exception, don't try to create a string... */
      SWIG_exception(SWIG_MemoryError, e.what() );
      
    } catch (std::runtime_error& e) {
      /* catch other std::runtime_error exceptions here */
      std::string s1("UPM Runtime Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_RuntimeError, s1.c_str());
      
    } catch (std::exception& e) {
      /* catch other std::exceptions here */
      std::string s1("UPM Error: "), s2(e.what());
      s1 = s1 + s2;
      SWIG_exception(SWIG_SystemError, s1.c_str() );
      
    } catch (...) {
      /* catch everything else */
      SWIG_exception(SWIG_UnknownError, "UPM Unknown exception" );
      
    }
    
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_upm__Jhd1313m1To_p_upm__LCD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((upm::LCD *) (upm::Lcm1602 *) ((upm::Jhd1313m1 *) x));
}
static void *_p_upm__SSD1306To_p_upm__LCD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((upm::LCD *)  ((upm::SSD1306 *) x));
}
static void *_p_upm__Lcm1602To_p_upm__LCD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((upm::LCD *)  ((upm::Lcm1602 *) x));
}
static void *_p_upm__EBOLEDTo_p_upm__LCD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((upm::LCD *)  ((upm::EBOLED *) x));
}
static void *_p_upm__SSD1327To_p_upm__LCD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((upm::LCD *)  ((upm::SSD1327 *) x));
}
static void *_p_upm__SSD1308To_p_upm__LCD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((upm::LCD *)  ((upm::SSD1308 *) x));
}
static void *_p_upm__SAINSMARTKSTo_p_upm__LCD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((upm::LCD *) (upm::Lcm1602 *) ((upm::SAINSMARTKS *) x));
}
static void *_p_upm__Jhd1313m1To_p_upm__Lcm1602(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((upm::Lcm1602 *)  ((upm::Jhd1313m1 *) x));
}
static void *_p_upm__SAINSMARTKSTo_p_upm__Lcm1602(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((upm::Lcm1602 *)  ((upm::SAINSMARTKS *) x));
}
static swig_type_info _swigt__p_a_8__unsigned_char = {"_p_a_8__unsigned_char", "unsigned char (*)[8]|uint8_t (*)[8]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8Array = {"_p_uint8Array", "uint8Array *|p_uint8Array", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_upm__EBOLED = {"_p_upm__EBOLED", "upm::EBOLED *|p_upm__EBOLED", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_upm__Jhd1313m1 = {"_p_upm__Jhd1313m1", "p_upm__Jhd1313m1|upm::Jhd1313m1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_upm__LCD = {"_p_upm__LCD", "upm::LCD *|p_upm__LCD", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_upm__Lcm1602 = {"_p_upm__Lcm1602", "upm::Lcm1602 *|p_upm__Lcm1602", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_upm__SAINSMARTKS = {"_p_upm__SAINSMARTKS", "upm::SAINSMARTKS *|p_upm__SAINSMARTKS", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_upm__SSD1306 = {"_p_upm__SSD1306", "p_upm__SSD1306|upm::SSD1306 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_upm__SSD1308 = {"_p_upm__SSD1308", "upm::SSD1308 *|p_upm__SSD1308", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_upm__SSD1327 = {"_p_upm__SSD1327", "upm::SSD1327 *|p_upm__SSD1327", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_upm__displayAddressingMode = {"_p_upm__displayAddressingMode", "enum upm::displayAddressingMode *|upm::displayAddressingMode *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_a_8__unsigned_char,
  &_swigt__p_char,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_uint8Array,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_upm__EBOLED,
  &_swigt__p_upm__Jhd1313m1,
  &_swigt__p_upm__LCD,
  &_swigt__p_upm__Lcm1602,
  &_swigt__p_upm__SAINSMARTKS,
  &_swigt__p_upm__SSD1306,
  &_swigt__p_upm__SSD1308,
  &_swigt__p_upm__SSD1327,
  &_swigt__p_upm__displayAddressingMode,
};

static swig_cast_info _swigc__p_a_8__unsigned_char[] = {  {&_swigt__p_a_8__unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8Array[] = {  {&_swigt__p_uint8Array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_upm__EBOLED[] = {  {&_swigt__p_upm__EBOLED, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_upm__Jhd1313m1[] = {  {&_swigt__p_upm__Jhd1313m1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_upm__LCD[] = {  {&_swigt__p_upm__Jhd1313m1, _p_upm__Jhd1313m1To_p_upm__LCD, 0, 0},  {&_swigt__p_upm__SSD1306, _p_upm__SSD1306To_p_upm__LCD, 0, 0},  {&_swigt__p_upm__Lcm1602, _p_upm__Lcm1602To_p_upm__LCD, 0, 0},  {&_swigt__p_upm__LCD, 0, 0, 0},  {&_swigt__p_upm__SAINSMARTKS, _p_upm__SAINSMARTKSTo_p_upm__LCD, 0, 0},  {&_swigt__p_upm__EBOLED, _p_upm__EBOLEDTo_p_upm__LCD, 0, 0},  {&_swigt__p_upm__SSD1327, _p_upm__SSD1327To_p_upm__LCD, 0, 0},  {&_swigt__p_upm__SSD1308, _p_upm__SSD1308To_p_upm__LCD, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_upm__Lcm1602[] = {  {&_swigt__p_upm__Jhd1313m1, _p_upm__Jhd1313m1To_p_upm__Lcm1602, 0, 0},  {&_swigt__p_upm__Lcm1602, 0, 0, 0},  {&_swigt__p_upm__SAINSMARTKS, _p_upm__SAINSMARTKSTo_p_upm__Lcm1602, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_upm__SAINSMARTKS[] = {  {&_swigt__p_upm__SAINSMARTKS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_upm__SSD1306[] = {  {&_swigt__p_upm__SSD1306, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_upm__SSD1308[] = {  {&_swigt__p_upm__SSD1308, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_upm__SSD1327[] = {  {&_swigt__p_upm__SSD1327, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_upm__displayAddressingMode[] = {  {&_swigt__p_upm__displayAddressingMode, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_a_8__unsigned_char,
  _swigc__p_char,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_uint8Array,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_upm__EBOLED,
  _swigc__p_upm__Jhd1313m1,
  _swigc__p_upm__LCD,
  _swigc__p_upm__Lcm1602,
  _swigc__p_upm__SAINSMARTKS,
  _swigc__p_upm__SSD1306,
  _swigc__p_upm__SSD1308,
  _swigc__p_upm__SSD1327,
  _swigc__p_upm__displayAddressingMode,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




#include <assert.h>

SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));

  if (moduleinfo.IsEmpty())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (v8::Handle<v8::Object> exports)
#else
void SWIGV8_INIT (v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> exports_obj = exports;


  // a class template for creating proxies of undefined types
  SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

  /* create objects for namespaces */
  

  /* create class templates */
  /* Name: _exports_uint8Array, Type: p_uint8Array, Dtor: _wrap_delete_uint8Array */
v8::Handle<v8::FunctionTemplate> _exports_uint8Array_class = SWIGV8_CreateClassTemplate("_exports_uint8Array");
SWIGV8_SET_CLASS_TEMPL(_exports_uint8Array_clientData.class_templ, _exports_uint8Array_class);
_exports_uint8Array_clientData.dtor = _wrap_delete_uint8Array;
if (SWIGTYPE_p_uint8Array->clientdata == 0) {
  SWIGTYPE_p_uint8Array->clientdata = &_exports_uint8Array_clientData;
}
/* Name: _exports_LCD, Type: p_upm__LCD, Dtor: _wrap_delete_LCD */
v8::Handle<v8::FunctionTemplate> _exports_LCD_class = SWIGV8_CreateClassTemplate("_exports_LCD");
SWIGV8_SET_CLASS_TEMPL(_exports_LCD_clientData.class_templ, _exports_LCD_class);
_exports_LCD_clientData.dtor = _wrap_delete_LCD;
if (SWIGTYPE_p_upm__LCD->clientdata == 0) {
  SWIGTYPE_p_upm__LCD->clientdata = &_exports_LCD_clientData;
}
/* Name: _exports_Lcm1602, Type: p_upm__Lcm1602, Dtor: _wrap_delete_Lcm1602 */
v8::Handle<v8::FunctionTemplate> _exports_Lcm1602_class = SWIGV8_CreateClassTemplate("_exports_Lcm1602");
SWIGV8_SET_CLASS_TEMPL(_exports_Lcm1602_clientData.class_templ, _exports_Lcm1602_class);
_exports_Lcm1602_clientData.dtor = _wrap_delete_Lcm1602;
if (SWIGTYPE_p_upm__Lcm1602->clientdata == 0) {
  SWIGTYPE_p_upm__Lcm1602->clientdata = &_exports_Lcm1602_clientData;
}
/* Name: _exports_Jhd1313m1, Type: p_upm__Jhd1313m1, Dtor: _wrap_delete_Jhd1313m1 */
v8::Handle<v8::FunctionTemplate> _exports_Jhd1313m1_class = SWIGV8_CreateClassTemplate("_exports_Jhd1313m1");
SWIGV8_SET_CLASS_TEMPL(_exports_Jhd1313m1_clientData.class_templ, _exports_Jhd1313m1_class);
_exports_Jhd1313m1_clientData.dtor = _wrap_delete_Jhd1313m1;
if (SWIGTYPE_p_upm__Jhd1313m1->clientdata == 0) {
  SWIGTYPE_p_upm__Jhd1313m1->clientdata = &_exports_Jhd1313m1_clientData;
}
/* Name: _exports_SSD1327, Type: p_upm__SSD1327, Dtor: _wrap_delete_SSD1327 */
v8::Handle<v8::FunctionTemplate> _exports_SSD1327_class = SWIGV8_CreateClassTemplate("_exports_SSD1327");
SWIGV8_SET_CLASS_TEMPL(_exports_SSD1327_clientData.class_templ, _exports_SSD1327_class);
_exports_SSD1327_clientData.dtor = _wrap_delete_SSD1327;
if (SWIGTYPE_p_upm__SSD1327->clientdata == 0) {
  SWIGTYPE_p_upm__SSD1327->clientdata = &_exports_SSD1327_clientData;
}
/* Name: _exports_SSD1308, Type: p_upm__SSD1308, Dtor: _wrap_delete_SSD1308 */
v8::Handle<v8::FunctionTemplate> _exports_SSD1308_class = SWIGV8_CreateClassTemplate("_exports_SSD1308");
SWIGV8_SET_CLASS_TEMPL(_exports_SSD1308_clientData.class_templ, _exports_SSD1308_class);
_exports_SSD1308_clientData.dtor = _wrap_delete_SSD1308;
if (SWIGTYPE_p_upm__SSD1308->clientdata == 0) {
  SWIGTYPE_p_upm__SSD1308->clientdata = &_exports_SSD1308_clientData;
}
/* Name: _exports_EBOLED, Type: p_upm__EBOLED, Dtor: _wrap_delete_EBOLED */
v8::Handle<v8::FunctionTemplate> _exports_EBOLED_class = SWIGV8_CreateClassTemplate("_exports_EBOLED");
SWIGV8_SET_CLASS_TEMPL(_exports_EBOLED_clientData.class_templ, _exports_EBOLED_class);
_exports_EBOLED_clientData.dtor = _wrap_delete_EBOLED;
if (SWIGTYPE_p_upm__EBOLED->clientdata == 0) {
  SWIGTYPE_p_upm__EBOLED->clientdata = &_exports_EBOLED_clientData;
}
/* Name: _exports_SAINSMARTKS, Type: p_upm__SAINSMARTKS, Dtor: _wrap_delete_SAINSMARTKS */
v8::Handle<v8::FunctionTemplate> _exports_SAINSMARTKS_class = SWIGV8_CreateClassTemplate("_exports_SAINSMARTKS");
SWIGV8_SET_CLASS_TEMPL(_exports_SAINSMARTKS_clientData.class_templ, _exports_SAINSMARTKS_class);
_exports_SAINSMARTKS_clientData.dtor = _wrap_delete_SAINSMARTKS;
if (SWIGTYPE_p_upm__SAINSMARTKS->clientdata == 0) {
  SWIGTYPE_p_upm__SAINSMARTKS->clientdata = &_exports_SAINSMARTKS_clientData;
}
/* Name: _exports_SSD1306, Type: p_upm__SSD1306, Dtor: _wrap_delete_SSD1306 */
v8::Handle<v8::FunctionTemplate> _exports_SSD1306_class = SWIGV8_CreateClassTemplate("_exports_SSD1306");
SWIGV8_SET_CLASS_TEMPL(_exports_SSD1306_clientData.class_templ, _exports_SSD1306_class);
_exports_SSD1306_clientData.dtor = _wrap_delete_SSD1306;
if (SWIGTYPE_p_upm__SSD1306->clientdata == 0) {
  SWIGTYPE_p_upm__SSD1306->clientdata = &_exports_SSD1306_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddMemberFunction(_exports_uint8Array_class, "getitem", _wrap_uint8Array_getitem);
SWIGV8_AddMemberFunction(_exports_uint8Array_class, "setitem", _wrap_uint8Array_setitem);
SWIGV8_AddMemberFunction(_exports_uint8Array_class, "cast", _wrap_uint8Array_cast);
SWIGV8_AddStaticVariable(exports_obj, "DISPLAY_CMD_OFF", _wrap_DISPLAY_CMD_OFF_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DISPLAY_CMD_ON", _wrap_DISPLAY_CMD_ON_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "BASE_LOW_COLUMN_ADDR", _wrap_BASE_LOW_COLUMN_ADDR_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "BASE_HIGH_COLUMN_ADDR", _wrap_BASE_HIGH_COLUMN_ADDR_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "BASE_PAGE_START_ADDR", _wrap_BASE_PAGE_START_ADDR_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DISPLAY_CMD_MEM_ADDR_MODE", _wrap_DISPLAY_CMD_MEM_ADDR_MODE_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "BasicFont", _wrap_BasicFont_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "HORIZONTAL", _wrap_upm_HORIZONTAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "VERTICAL", _wrap_upm_VERTICAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "PAGE", _wrap_upm_PAGE, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_LCD_class, "write", _wrap_LCD__wrap_LCD_write);
SWIGV8_AddMemberFunction(_exports_LCD_class, "setCursor", _wrap_LCD_setCursor);
SWIGV8_AddMemberFunction(_exports_LCD_class, "clear", _wrap_LCD_clear);
SWIGV8_AddMemberFunction(_exports_LCD_class, "home", _wrap_LCD_home);
SWIGV8_AddMemberFunction(_exports_LCD_class, "name", _wrap_LCD_name);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "write", _wrap_Lcm1602_write);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "setCursor", _wrap_Lcm1602_setCursor);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "clear", _wrap_Lcm1602_clear);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "home", _wrap_Lcm1602_home);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "createChar", _wrap_Lcm1602_createChar);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "displayOn", _wrap_Lcm1602_displayOn);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "displayOff", _wrap_Lcm1602_displayOff);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "cursorOn", _wrap_Lcm1602_cursorOn);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "cursorOff", _wrap_Lcm1602_cursorOff);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "cursorBlinkOn", _wrap_Lcm1602_cursorBlinkOn);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "cursorBlinkOff", _wrap_Lcm1602_cursorBlinkOff);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "backlightOn", _wrap_Lcm1602_backlightOn);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "backlightOff", _wrap_Lcm1602_backlightOff);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "scrollDisplayLeft", _wrap_Lcm1602_scrollDisplayLeft);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "scrollDisplayRight", _wrap_Lcm1602_scrollDisplayRight);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "entryLeftToRight", _wrap_Lcm1602_entryLeftToRight);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "entryRightToLeft", _wrap_Lcm1602_entryRightToLeft);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "autoscrollOn", _wrap_Lcm1602_autoscrollOn);
SWIGV8_AddMemberFunction(_exports_Lcm1602_class, "autoscrollOff", _wrap_Lcm1602_autoscrollOff);
SWIGV8_AddMemberFunction(_exports_Jhd1313m1_class, "scroll", _wrap_Jhd1313m1_scroll);
SWIGV8_AddMemberFunction(_exports_Jhd1313m1_class, "setColor", _wrap_Jhd1313m1_setColor);
SWIGV8_AddMemberFunction(_exports_Jhd1313m1_class, "backlightOn", _wrap_Jhd1313m1_backlightOn);
SWIGV8_AddMemberFunction(_exports_Jhd1313m1_class, "backlightOff", _wrap_Jhd1313m1_backlightOff);
SWIGV8_AddStaticVariable(exports_obj, "DISPLAY_CMD_SET_NORMAL", _wrap_DISPLAY_CMD_SET_NORMAL_get, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_SSD1327_class, "draw", _wrap_SSD1327_draw);
SWIGV8_AddMemberFunction(_exports_SSD1327_class, "setGrayLevel", _wrap_SSD1327_setGrayLevel);
SWIGV8_AddMemberFunction(_exports_SSD1327_class, "write", _wrap_SSD1327_write);
SWIGV8_AddMemberFunction(_exports_SSD1327_class, "setCursor", _wrap_SSD1327_setCursor);
SWIGV8_AddMemberFunction(_exports_SSD1327_class, "clear", _wrap_SSD1327_clear);
SWIGV8_AddMemberFunction(_exports_SSD1327_class, "home", _wrap_SSD1327_home);
SWIGV8_AddStaticVariable(exports_obj, "DISPLAY_CMD_SET_NORMAL_1308", _wrap_DISPLAY_CMD_SET_NORMAL_1308_get, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_SSD1308_class, "draw", _wrap_SSD1308_draw);
SWIGV8_AddMemberFunction(_exports_SSD1308_class, "write", _wrap_SSD1308_write);
SWIGV8_AddMemberFunction(_exports_SSD1308_class, "setCursor", _wrap_SSD1308_setCursor);
SWIGV8_AddMemberFunction(_exports_SSD1308_class, "clear", _wrap_SSD1308_clear);
SWIGV8_AddMemberFunction(_exports_SSD1308_class, "home", _wrap_SSD1308_home);
SWIGV8_AddStaticVariable(exports_obj, "EBOLED_DEFAULT_SPI_BUS", _wrap_EBOLED_DEFAULT_SPI_BUS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "EBOLED_DEFAULT_CD", _wrap_EBOLED_DEFAULT_CD, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "EBOLED_DEFAULT_RESET", _wrap_EBOLED_DEFAULT_RESET, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "COLOR_WHITE", _wrap_COLOR_WHITE_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "COLOR_BLACK", _wrap_COLOR_BLACK_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "COLOR_XOR", _wrap_COLOR_XOR_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "OLED_WIDTH", _wrap_OLED_WIDTH_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "VERT_COLUMNS", _wrap_VERT_COLUMNS_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "OLED_HEIGHT", _wrap_OLED_HEIGHT_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "BUFFER_SIZE", _wrap_BUFFER_SIZE_get, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "refresh", _wrap_EBOLED_refresh);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "write", _wrap_EBOLED_write);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "setCursor", _wrap_EBOLED_setCursor);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "setTextColor", _wrap_EBOLED_setTextColor);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "setTextSize", _wrap_EBOLED_setTextSize);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "setTextWrap", _wrap_EBOLED_setTextWrap);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawChar", _wrap_EBOLED_drawChar);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "clear", _wrap_EBOLED_clear);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "clearScreenBuffer", _wrap_EBOLED_clearScreenBuffer);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "home", _wrap_EBOLED_home);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawPixel", _wrap_EBOLED__wrap_EBOLED_drawPixel);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawLine", _wrap_EBOLED__wrap_EBOLED_drawLine);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawLineHorizontal", _wrap_EBOLED__wrap_EBOLED_drawLineHorizontal);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawLineVertical", _wrap_EBOLED__wrap_EBOLED_drawLineVertical);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawRectangle", _wrap_EBOLED__wrap_EBOLED_drawRectangle);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawRoundedRectangle", _wrap_EBOLED_drawRoundedRectangle);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawRectangleFilled", _wrap_EBOLED__wrap_EBOLED_drawRectangleFilled);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawTriangle", _wrap_EBOLED__wrap_EBOLED_drawTriangle);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawTriangleFilled", _wrap_EBOLED_drawTriangleFilled);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawCircle", _wrap_EBOLED__wrap_EBOLED_drawCircle);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawRoundCorners", _wrap_EBOLED_drawRoundCorners);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawCircleFilled", _wrap_EBOLED_drawCircleFilled);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "drawRoundedCornersFilled", _wrap_EBOLED_drawRoundedCornersFilled);
SWIGV8_AddMemberFunction(_exports_EBOLED_class, "fillScreen", _wrap_EBOLED__wrap_EBOLED_fillScreen);
SWIGV8_AddMemberFunction(_exports_SAINSMARTKS_class, "getRawKeyValue", _wrap_SAINSMARTKS_getRawKeyValue);
SWIGV8_AddStaticVariable(exports_obj, "DISPLAY_CMD_SET_NORMAL_1306", _wrap_DISPLAY_CMD_SET_NORMAL_1306_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_SETCONTRAST", _wrap_SSD1306_SETCONTRAST_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_DISPLAYALLON_RESUME", _wrap_SSD1306_DISPLAYALLON_RESUME_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_DISPLAYALLON", _wrap_SSD1306_DISPLAYALLON_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DISPLAY_CMD_SET_INVERT_1306", _wrap_DISPLAY_CMD_SET_INVERT_1306_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_SETDISPLAYOFFSET", _wrap_SSD1306_SETDISPLAYOFFSET_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_SETCOMPINS", _wrap_SSD1306_SETCOMPINS_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_SETVCOMDETECT", _wrap_SSD1306_SETVCOMDETECT_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_SETDISPLAYCLOCKDIV", _wrap_SSD1306_SETDISPLAYCLOCKDIV_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_SETPRECHARGE", _wrap_SSD1306_SETPRECHARGE_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_SETMULTIPLEX", _wrap_SSD1306_SETMULTIPLEX_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_SETLOWCOLUM", _wrap_SSD1306_SETLOWCOLUM_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_SETHIGHCOLUMN", _wrap_SSD1306_SETHIGHCOLUMN_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_SETSTARTLINE", _wrap_SSD1306_SETSTARTLINE_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_MEMORYMODE", _wrap_SSD1306_MEMORYMODE_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_COLUMNADDR", _wrap_SSD1306_COLUMNADDR_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_PAGEADDR", _wrap_SSD1306_PAGEADDR_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_COMSCANINC", _wrap_SSD1306_COMSCANINC_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_COMSCANDEC", _wrap_SSD1306_COMSCANDEC_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_SEGREMAP", _wrap_SSD1306_SEGREMAP_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_CHARGEPUMP", _wrap_SSD1306_CHARGEPUMP_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_EXTERNALVCC", _wrap_SSD1306_EXTERNALVCC_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_SWITCHCAPVCC", _wrap_SSD1306_SWITCHCAPVCC_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_ACTIVATE_SCROLL", _wrap_SSD1306_ACTIVATE_SCROLL_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_DEACTIVATE_SCROLL", _wrap_SSD1306_DEACTIVATE_SCROLL_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_SET_VERTICAL_SCROLL_AREA", _wrap_SSD1306_SET_VERTICAL_SCROLL_AREA_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_RIGHT_HORIZONTAL_SCROLL", _wrap_SSD1306_RIGHT_HORIZONTAL_SCROLL_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_LEFT_HORIZONTAL_SCROLL", _wrap_SSD1306_LEFT_HORIZONTAL_SCROLL_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL", _wrap_SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL", _wrap_SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_BLACK", _wrap_SSD1306_BLACK_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_WHITE", _wrap_SSD1306_WHITE_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_LCDWIDTH", _wrap_SSD1306_LCDWIDTH_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SSD1306_LCDHEIGHT", _wrap_SSD1306_LCDHEIGHT_get, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_SSD1306_class, "draw", _wrap_SSD1306_draw);
SWIGV8_AddMemberFunction(_exports_SSD1306_class, "write", _wrap_SSD1306_write);
SWIGV8_AddMemberFunction(_exports_SSD1306_class, "setCursor", _wrap_SSD1306_setCursor);
SWIGV8_AddMemberFunction(_exports_SSD1306_class, "clear", _wrap_SSD1306_clear);
SWIGV8_AddMemberFunction(_exports_SSD1306_class, "home", _wrap_SSD1306_home);
SWIGV8_AddMemberFunction(_exports_SSD1306_class, "invert", _wrap_SSD1306_invert);
SWIGV8_AddMemberFunction(_exports_SSD1306_class, "startscrollright", _wrap_SSD1306_startscrollright);
SWIGV8_AddMemberFunction(_exports_SSD1306_class, "startscrollleft", _wrap_SSD1306_startscrollleft);
SWIGV8_AddMemberFunction(_exports_SSD1306_class, "startscrolldiagright", _wrap_SSD1306_startscrolldiagright);
SWIGV8_AddMemberFunction(_exports_SSD1306_class, "startscrolldiagleft", _wrap_SSD1306_startscrolldiagleft);
SWIGV8_AddMemberFunction(_exports_SSD1306_class, "stopscroll", _wrap_SSD1306_stopscroll);
SWIGV8_AddMemberFunction(_exports_SSD1306_class, "dim", _wrap_SSD1306_dim);


  /* setup inheritances */
  if (SWIGTYPE_p_upm__LCD->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031903)
  _exports_Lcm1602_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ);
#else
  _exports_Lcm1602_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Lcm1602 _upm__LCD\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Lcm1602 _upm__LCD\n");
#endif
}
if (SWIGTYPE_p_upm__Lcm1602->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__Lcm1602->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031903)
  _exports_Jhd1313m1_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__Lcm1602->clientdata)->class_templ);
#else
  _exports_Jhd1313m1_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__Lcm1602->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Jhd1313m1 _upm__Lcm1602\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Jhd1313m1 _upm__Lcm1602\n");
#endif
}
if (SWIGTYPE_p_upm__LCD->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031903)
  _exports_SSD1327_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ);
#else
  _exports_SSD1327_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_SSD1327 _upm__LCD\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_SSD1327 _upm__LCD\n");
#endif
}
if (SWIGTYPE_p_upm__LCD->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031903)
  _exports_SSD1308_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ);
#else
  _exports_SSD1308_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_SSD1308 _upm__LCD\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_SSD1308 _upm__LCD\n");
#endif
}
if (SWIGTYPE_p_upm__LCD->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031903)
  _exports_EBOLED_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ);
#else
  _exports_EBOLED_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_EBOLED _upm__LCD\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_EBOLED _upm__LCD\n");
#endif
}
if (SWIGTYPE_p_upm__Lcm1602->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__Lcm1602->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031903)
  _exports_SAINSMARTKS_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__Lcm1602->clientdata)->class_templ);
#else
  _exports_SAINSMARTKS_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__Lcm1602->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_SAINSMARTKS _upm__Lcm1602\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_SAINSMARTKS _upm__Lcm1602\n");
#endif
}
if (SWIGTYPE_p_upm__LCD->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ.IsEmpty()))
{
#if (SWIG_V8_VERSION < 0x031903)
  _exports_SSD1306_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ);
#else
  _exports_SSD1306_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_upm__LCD->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_SSD1306 _upm__LCD\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_SSD1306 _upm__LCD\n");
#endif
}


  /* class instances */
  /* Class: uint8Array (_exports_uint8Array) */
v8::Handle<v8::FunctionTemplate> _exports_uint8Array_class_0 = SWIGV8_CreateClassTemplate("uint8Array");
_exports_uint8Array_class_0->SetCallHandler(_wrap_new_uint8Array);
_exports_uint8Array_class_0->Inherit(_exports_uint8Array_class);
_exports_uint8Array_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_uint8Array_obj = _exports_uint8Array_class_0->GetFunction();
/* Class: LCD (_exports_LCD) */
v8::Handle<v8::FunctionTemplate> _exports_LCD_class_0 = SWIGV8_CreateClassTemplate("LCD");
_exports_LCD_class_0->SetCallHandler(_wrap_new_veto_LCD);
_exports_LCD_class_0->Inherit(_exports_LCD_class);
_exports_LCD_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_LCD_obj = _exports_LCD_class_0->GetFunction();
/* Class: Lcm1602 (_exports_Lcm1602) */
v8::Handle<v8::FunctionTemplate> _exports_Lcm1602_class_0 = SWIGV8_CreateClassTemplate("Lcm1602");
_exports_Lcm1602_class_0->SetCallHandler(_wrap_new_Lcm1602);
_exports_Lcm1602_class_0->Inherit(_exports_Lcm1602_class);
_exports_Lcm1602_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Lcm1602_obj = _exports_Lcm1602_class_0->GetFunction();
/* Class: Jhd1313m1 (_exports_Jhd1313m1) */
v8::Handle<v8::FunctionTemplate> _exports_Jhd1313m1_class_0 = SWIGV8_CreateClassTemplate("Jhd1313m1");
_exports_Jhd1313m1_class_0->SetCallHandler(_wrap_new_Jhd1313m1);
_exports_Jhd1313m1_class_0->Inherit(_exports_Jhd1313m1_class);
_exports_Jhd1313m1_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Jhd1313m1_obj = _exports_Jhd1313m1_class_0->GetFunction();
/* Class: SSD1327 (_exports_SSD1327) */
v8::Handle<v8::FunctionTemplate> _exports_SSD1327_class_0 = SWIGV8_CreateClassTemplate("SSD1327");
_exports_SSD1327_class_0->SetCallHandler(_wrap_new_SSD1327);
_exports_SSD1327_class_0->Inherit(_exports_SSD1327_class);
_exports_SSD1327_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_SSD1327_obj = _exports_SSD1327_class_0->GetFunction();
/* Class: SSD1308 (_exports_SSD1308) */
v8::Handle<v8::FunctionTemplate> _exports_SSD1308_class_0 = SWIGV8_CreateClassTemplate("SSD1308");
_exports_SSD1308_class_0->SetCallHandler(_wrap_new_SSD1308);
_exports_SSD1308_class_0->Inherit(_exports_SSD1308_class);
_exports_SSD1308_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_SSD1308_obj = _exports_SSD1308_class_0->GetFunction();
/* Class: EBOLED (_exports_EBOLED) */
v8::Handle<v8::FunctionTemplate> _exports_EBOLED_class_0 = SWIGV8_CreateClassTemplate("EBOLED");
_exports_EBOLED_class_0->SetCallHandler(_wrap_new_EBOLED);
_exports_EBOLED_class_0->Inherit(_exports_EBOLED_class);
_exports_EBOLED_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_EBOLED_obj = _exports_EBOLED_class_0->GetFunction();
/* Class: SAINSMARTKS (_exports_SAINSMARTKS) */
v8::Handle<v8::FunctionTemplate> _exports_SAINSMARTKS_class_0 = SWIGV8_CreateClassTemplate("SAINSMARTKS");
_exports_SAINSMARTKS_class_0->SetCallHandler(_wrap_new_SAINSMARTKS);
_exports_SAINSMARTKS_class_0->Inherit(_exports_SAINSMARTKS_class);
_exports_SAINSMARTKS_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_SAINSMARTKS_obj = _exports_SAINSMARTKS_class_0->GetFunction();
/* Class: SSD1306 (_exports_SSD1306) */
v8::Handle<v8::FunctionTemplate> _exports_SSD1306_class_0 = SWIGV8_CreateClassTemplate("SSD1306");
_exports_SSD1306_class_0->SetCallHandler(_wrap_new_SSD1306);
_exports_SSD1306_class_0->Inherit(_exports_SSD1306_class);
_exports_SSD1306_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_SSD1306_obj = _exports_SSD1306_class_0->GetFunction();


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(exports_obj, "cleanUp", _wrap_cleanUp);
SWIGV8_AddStaticFunction(_exports_uint8Array_obj, "frompointer", _wrap_uint8Array_frompointer);


  /* register classes */
  exports_obj->Set(SWIGV8_SYMBOL_NEW("uint8Array"), _exports_uint8Array_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("LCD"), _exports_LCD_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Lcm1602"), _exports_Lcm1602_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Jhd1313m1"), _exports_Jhd1313m1_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("SSD1327"), _exports_SSD1327_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("SSD1308"), _exports_SSD1308_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("EBOLED"), _exports_EBOLED_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("SAINSMARTKS"), _exports_SAINSMARTKS_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("SSD1306"), _exports_SSD1306_obj);


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(jsupm_i2clcd, jsupm_i2clcd_initialize)
#endif
